generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id            Int                 @id @default(autoincrement())
  user_name          String              @unique
  user_password      String
  first_name         String
  last_name          String
  email              String              @unique
  phone              String?
  status             Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  auth_id            Int?
  role_id            Int?
  faculty_id         Int?
  student_faculty_id Int?
  guest_faculty_id   Int?
  Comment            Comment[]
  Event              Event[]
  Faculty            Faculty?
  GuestFaculty       GuestFaculty?
  StudentFaculty     StudentFaculty?
  StudentSubmission  StudentSubmission[]
  auth               Authentication?     @relation(fields: [auth_id], references: [auth_id])
  role               Role?               @relation(fields: [role_id], references: [role_id])
  browserTracking    browserTracking[]
}

model Role {
  role_id   Int      @id @default(autoincrement())
  role_name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User[]
}

model Authentication {
  auth_id     Int      @id @default(autoincrement())
  auth_code   Int
  is_verified Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User[]
}

model Faculty {
  faculty_id     Int              @id @default(autoincrement())
  name           String           @unique
  coordinator_id Int?             @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  event          Event[]
  coordinator    User?            @relation(fields: [coordinator_id], references: [user_id])
  guests         GuestFaculty[]
  students       StudentFaculty[]
}

model Event {
  event_id                        Int                 @id @default(autoincrement())
  title                           String
  description                     String?
  contribution_content_upload_url String[]
  status                          ContributionStatus  @default(OPEN)
  allowPublication                Boolean             @default(false)
  createdAt                       DateTime            @default(now())
  updatedAt                       DateTime            @updatedAt
  userUser_id                     Int?
  faculty_id                      Int?
  closure                         ClosureDate?        @relation(fields: [closure_id], references: [closure_id])
  closure_id                      Int?
  view_count                      ViewCount[]
  User                            User?               @relation(fields: [userUser_id], references: [user_id])
  Faculty                         Faculty?            @relation(fields: [facultyFaculty_id], references: [faculty_id])
  facultyFaculty_id               Int?
  StudentSubmission               StudentSubmission[]
}

model ViewCount {
  view_count_id Int   @id @default(autoincrement())
  count         Int
  event         Event @relation(fields: [event_id], references: [event_id])
  event_id      Int
}

model StudentSubmission {
  submission_id     Int              @id @default(autoincrement())
  student_id        Int
  title             String
  content           String
  agreed_to_terms   Boolean
  submittedAt       DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  uploadUrl         String[]
  comments          Comment[]
  event             Event?           @relation(fields: [event_id], references: [event_id])
  event_id          Int?
  student           User             @relation(fields: [student_id], references: [user_id])
  submission_status SubmissionStatus @default(PENDING)
}

model Comment {
  comment_id    Int               @id @default(autoincrement())
  content       String
  user_id       Int
  createdAt     DateTime          @default(now())
  submission_id Int
  submission    StudentSubmission @relation(fields: [submission_id], references: [submission_id])
  contributor   User              @relation(fields: [user_id], references: [user_id])
}

model StudentFaculty {
  student_faculty_id Int     @id @default(autoincrement())
  student_id         Int     @unique
  faculty_id         Int
  faculty            Faculty @relation(fields: [faculty_id], references: [faculty_id])
  student            User    @relation(fields: [student_id], references: [user_id])
}

model GuestFaculty {
  guest_faculty_id Int     @id @default(autoincrement())
  guest_id         Int     @unique
  faculty_id       Int
  faculty          Faculty @relation(fields: [faculty_id], references: [faculty_id])
  guest            User    @relation(fields: [guest_id], references: [user_id])
}

model ClosureDate {
  closure_id    Int      @id @default(autoincrement())
  entry_closure DateTime
  final_closure DateTime
  event         Event[]
}

model browserTracking {
  id              Int      @id @default(autoincrement())
  browser_name    String
  browser_version String?
  os_name         String
  os_version      String
  device_type     String
  device_vendor   String
  device_model    String
  request_path    String
  request_method  String
  createdAt       DateTime @default(now())
  user_id         Int?
  user            User?    @relation(fields: [user_id], references: [user_id])
}

enum ContributionStatus {
  OPEN
  CLOSED
  FINALIZED
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  REJECTED
}
